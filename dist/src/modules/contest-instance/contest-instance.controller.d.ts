import { User as UserType } from 'interfaces/user.interface';
import { ContestInstanceService } from './contest-instance.service';
import { RegisterToContestInstanceDto, RegisterToContestInstanceDtoResponseDto } from './dto/registerToContestInstance.dto';
import { GetUserInstanceParamsDto, GetUserInstanceResponseDto } from './dto/getLiveAndUpcomingInstances.dto';
import { ActiveContestInstancesDto, ActiveContestInstancesResponseDto } from './dto/activeContestInstances.dto';
import { WithdrawFromContestInstanceDto, WithdrawFromContestInstanceResponseDto } from './dto/withdrawFromContestInstance.dto';
import { PlaceBetDto, PlaceBetResponseDto } from './dto/placeBet.dto';
import { RealtimeDbService } from 'modules/integrations/firebase/realtime-db/realtime-db.service';
import { getUserBetsResponseDto, getUserBetsDto } from './dto/pendingAndSettledBets.dto';
import { getUserBalanceDto, getUserBalanceResponseDto } from './dto/userBetsHistory.dto';
import { GetContestInstanceLeaderboardRequestDto, GetContestInstanceLeaderboardResponseDto } from './dto/getContestInstanceLeaderboard.dto';
import { GetContestInstanceUserMaxBetLimitRequestDto, GetContestInstanceUserMaxBetLimitResponseDto } from './dto/getContestInstanceUserMaxBetLimit.dto';
import { ForceBetsService } from '../contest/force-bets/force-bets.service';
import { PersonalDetailsService } from '../user-management/profile/personal-details/personal-details.service';
import { ContestInstanceParticipantsService } from './contest-instance-participants/contest-instance-participants.service';
export declare class ContestInstanceController {
    private readonly contestInstanceService;
    private readonly contestInstanceParticipantsService;
    private readonly realtimeDbService;
    private readonly personalDetailsService;
    private forceBetService;
    constructor(contestInstanceService: ContestInstanceService, contestInstanceParticipantsService: ContestInstanceParticipantsService, realtimeDbService: RealtimeDbService, personalDetailsService: PersonalDetailsService, forceBetService: ForceBetsService);
    getActiveContestInstances({ fixtureId, periodId, limit, contestTypes }: ActiveContestInstancesDto, user: UserType | null): Promise<ActiveContestInstancesResponseDto[]>;
    registerToContestInstance(userDetails: Pick<UserType, 'id' | 'username' | 'avatar'>, { contestInstanceId }: RegisterToContestInstanceDto): Promise<RegisterToContestInstanceDtoResponseDto>;
    getUserContestsInstancesWithStatuses(user: UserType, userId: string, params: GetUserInstanceParamsDto): Promise<GetUserInstanceResponseDto>;
    withdrawFromContestInstance({ id: userId }: Pick<UserType, 'id'>, { contestInstanceId }: WithdrawFromContestInstanceDto): Promise<WithdrawFromContestInstanceResponseDto>;
    placeBet({ id: userId }: Pick<UserType, 'id'>, { contestInstanceId, marketLineId, betAmount, americanOdds, winAmount, isForcedBet, }: PlaceBetDto): Promise<PlaceBetResponseDto>;
    getParticipantBets(user: UserType | null, params: getUserBetsDto): Promise<getUserBetsResponseDto[]>;
    getUserBalance({ id: userId }: Pick<UserType, 'id'>, { contestInstanceId }: getUserBalanceDto): Promise<getUserBalanceResponseDto>;
    getContestInstanceLeaderboard({ id: userId }: Pick<UserType, 'id'>, { contestInstanceId, page, size, followingOnly, }: GetContestInstanceLeaderboardRequestDto): Promise<GetContestInstanceLeaderboardResponseDto>;
    getContestInstanceLeaderboardV2(user: Pick<UserType, 'id'> | null, { contestInstanceId, page, size, followingOnly, }: GetContestInstanceLeaderboardRequestDto, requestedUserId: string): Promise<GetContestInstanceLeaderboardResponseDto>;
    getContestInstanceUserMaxBetLimit({ id: userId }: Pick<UserType, 'id'>, { contestInstanceId, marketLineId, }: GetContestInstanceUserMaxBetLimitRequestDto): Promise<GetContestInstanceUserMaxBetLimitResponseDto>;
}
