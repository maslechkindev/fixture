import { TransactionManager } from 'modules/ancillary/transaction-manager/transaction-manager.service';
import { FirebaseAuthService } from 'modules/user-management/auth/firebase/firebase.auth.service';
import UserBanRecord from 'interfaces/entities/userBanRecord';
import { UsersRepository } from './users.repository';
import { PaginationParams } from './users.types';
import { User } from 'interfaces/user.interface';
import { GetUserDto } from './dto/getUser.dto';
import UserPremiumTermsRecord from 'interfaces/entities/userPremiumTermsRecord';
import UserBalancesRecord from 'interfaces/entities/userBalancesRecord';
import { BalanceService } from '../../../balance/balance.service';
import TransactionsListInterface from 'modules/balance/interfaces/transactionsList.interface';
import { ReplenishBalanceDto } from './dto/replenishBalance.dto';
import { RecursivePartial } from 'helpers/recursivePartial';
import { ContestInstanceParticipantsService } from 'modules/contest-instance/contest-instance-participants/contest-instance-participants.service';
import { QueryParamsDTO } from './dto/queryParams.dto';
import { FiltersDto } from './dto/filters.dto';
import { FirebaseDynamicLinksService } from 'modules/integrations/firebase/dynamic-links';
export declare class UsersService {
    private usersRepository;
    private transactionManager;
    private firebaseAuthService;
    private balanceService;
    private fireBaseDynamicLinks;
    private participantService;
    constructor(usersRepository: UsersRepository, transactionManager: TransactionManager, firebaseAuthService: FirebaseAuthService, balanceService: BalanceService, fireBaseDynamicLinks: FirebaseDynamicLinksService, participantService: ContestInstanceParticipantsService);
    getUsers(params: PaginationParams): Promise<{
        users: Omit<{
            referralCodeUsed: string;
            id?: string;
            email?: string;
            passwordHash?: string;
            salt?: string;
            promoCode?: string;
            status?: string;
            username?: string;
            createdAt?: Date;
            type?: string;
            confirmedAt?: Date;
            avatar?: string;
            firstName?: string;
            lastName?: string;
            dateOfBirth?: Date;
            isUsernameChanged?: boolean;
            startTime?: Date;
            endTime?: Date;
            notificationsEnabled?: boolean;
            referralLink?: string;
            deletedAt?: Date;
            country?: string;
            state?: string;
            isInfluencer?: boolean;
            firstLoginPassed?: boolean;
            fullcount?: string;
        }, "startTime" | "endTime" | "fullcount">[];
        count: number;
    }>;
    getUser(params: GetUserDto): Promise<Partial<User> & {
        referralCodeUsed: string;
    }>;
    getUserTransactions(userId: string, params: QueryParamsDTO, filters: FiltersDto): Promise<Array<TransactionsListInterface>>;
    getBanInfo(userId: string): Promise<UserBanRecord>;
    getPremiumInfo(userId: string): Promise<UserPremiumTermsRecord>;
    getBalanceInfo(userId: string): Promise<UserBalancesRecord>;
    updateUser(data: Partial<User>, user: Partial<User>): Promise<Partial<User>>;
    banUser(userId: string, reason: string): Promise<UserBanRecord>;
    private formatTime;
    updatePremiumInfo(userId: string, startTime: string, endTime: string): Promise<UserPremiumTermsRecord>;
    manualReplenishUserBalance(replenish: ReplenishBalanceDto): Promise<RecursivePartial<UserBalancesRecord>>;
    getConfirmedUsersCount(): Promise<number>;
    getFreeUsernamesCount(): Promise<number>;
    getDynamicHomeLinkWithPromoCode(promoCode: string): Promise<import("firebase-dynamic-links").ShortLinkResponse>;
}
